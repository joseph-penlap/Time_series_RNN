# -*- coding: utf-8 -*-
"""RNN_LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qvZXog3DzGWA3rr8yHSCxe2-JcbEGMWj

PRACTICAL      GROUP 7

MEMBERS:

* Joseph Penlap
* Josue Nguinabe
* Lydie Gaelle
* Nathalie Jadot
* Paule Comfort

**Forecasting using Recurrent Neural** **Networks (RNN)**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
np.random.seed(123)

import matplotlib.pyplot as plt
import pandas as pd
import math

import tensorflow as tf
#tf.set_random_seed(1234)

import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM, SimpleRNN
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score, confusion_matrix

# %matplotlib inline

from google.colab import files

import pandas as pd

upload = files.upload()

df1 = pd.read_csv('wind_solar.csv',skiprows = 15)
df1.head(10)

def ReScale(data, a):
    data_avg = data.mean()
    scaled_data = a*(data - data_avg)
    return scaled_data

df1.columns

df =  df1[ ['PS', 'WS10M', 'WD10M', 'WS50M', 'PRECTOTCORR', 'T2M']  ]
df

df2 = ReScale(df , 0.5)
#df2.drop(['WD10M' , 'PS' ] , axis = 1 , inplace  =  True)
df2.head()

df2.columns

df_new1 = df2[   ['WS10M', 'WD10M']  ]

df2['PS']

df2





def sliding_windows(data, window_size):#, forecast_over, shift):
    num_batches = len(data) - window_size + 1
    x = []
    for i in range(num_batches):
        _x = data[ i:i+window_size]
        x.append(_x)

    #x.append(data[-window_size:,:])
    return np.array(x)

time_steps_provider = 12

framework = sliding_windows(df2, time_steps_provider)[:-1]  #4 here is the loopback
framework

#
outputs1 = df2['T2M'][time_steps_provider:].values

output2 = df1['PRECTOTCORR'][time_steps_provider:].values
output2

"""Our training data"""

len(framework)
train_points = int(0.67*len(framework)) #0.75 is the proportion of the trainign set
train_points

test_points = len(framework) - train_points
test_points

test_points = len(framework) - train_points
test_points

#n_points = len(df_new)
X2_train, X2_test = framework[:train_points] , framework[train_points:]
y2_train, y2_test = outputs1[:train_points],  outputs1[train_points:]

print(X2_train.shape , X2_test.shape)

from tensorflow.python.framework import ops
ops.reset_default_graph()
keras.backend.clear_session()

X2_train = X2_train.reshape(X2_train.shape[0],4, 11)
X2_test = X2_test.reshape(X2_test.shape[0],4, 11)
print(X2_train.shape)
print(X2_test.shape)

X2_train.shape

model = Sequential()
model.add(SimpleRNN(units=100, input_shape=(X2_train.shape[1], X2_train.shape[2]))) #input_shape takes time steps and features
#model.add(SimpleRNN(units=10))#, input_shape=(X2_train.shape[1], X2_train.shape[2])))
#model.add(SimpleRNN(units=10))#, input_shape=(X2_train.shape[1], X2_train.shape[2])))
model.add(Dense(1))

model.compile(loss='mean_squared_error', optimizer='sgd')

model.summary()

nb_epoch = 20

model.fit(X2_train, y2_train, epochs=nb_epoch)

y2_train_pred = model.predict(X2_train)
y2_test_pred = model.predict(X2_test)

mean_squared_error(y2_train_pred , y2_train)

mean_squared_error(y2_test_pred , y2_test)

accuracy_score(y2_test_pred, y2_test)

y2_train_pred.shape

plt.figure(figsize=(20,8))
plt.plot(y2_train_pred[1:] , label ='y_train_pred')
plt.plot(y2_train , label ='y_train')
plt.legend(loc='upper right')

plt.figure(figsize=(20,8))
plt.plot(y2_test_pred[1:] , label ='y_test_pred')
plt.plot(y2_test , label ='y_test')
plt.legend(loc='upper right')







from keras.layers import LSTM

model1 = Sequential()
model1.add(LSTM(units=20, input_shape=(X2_train.shape[1], X2_train.shape[2]))) #input_shape takes time steps and features
#model1.add(LSTM(units=10))#, input_shape=(X2_train.shape[1], X2_train.shape[2])))
#model.add(SimpleRNN(units=10))#, input_shape=(X2_train.shape[1], X2_train.shape[2])))
model1.add(Dense(1))

model1.compile(loss='mean_squared_error', optimizer='sgd')

model1.summary()

nb_epoch = 50

model1.fit(X2_train, y2_train, epochs=nb_epoch)

#y_train_pred_LSTM = model.predict(X_train)
#y_test_pred_LSTM = model.predict(X_test)
y2_train_pred_LSTM = model.predict(X2_train)
y2_test_pred_LSTM = model.predict(X2_test)

mean_squared_error(y2_train_pred_LSTM , y2_train)

mean_squared_error(y2_test_pred_LSTM , y2_test)

plt.figure(figsize=(20,8))
plt.plot(y2_train_pred_LSTM[1:] , label ='y_train_pred_LSTM')
plt.plot(y2_train , label ='y_train')
plt.title('Actual vs prediction')
plt.legend(loc='upper right')

import matplotlib.pyplot as plt

plt.figure(figsize=(20,8))
plt.plot(y2_test_pred_LSTM[1:] , label ='y_test_pred_LSTM')
plt.plot(y2_test , label ='y_test')
plt.legend(loc='upper right')

df1.head()

plt.plot(df1['HR'], df1['T2M'])